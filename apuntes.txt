enlaces de interes

quitar fondos de imagenes 
https://www.remove.bg/es

iconos
https://boxicons.com/?query=arrow

imagenes
https://unsplash.com/

Gradientes
https://webgradients.com/

Generadr olas svg
https://smooth.ie/blogs/news/svg-wavey-transitions-between-sections

Conocer la resulocion de mi pantalla
https://whatismyviewport.com/

-----------------------------------------------------------------------------
display: inline: NO comienzan en una nueva línea y
solo ocupan tanto ancho como su contenido, si aplico un 
ancho y alto a elemento que ya tenga esta propiedad
 estos no van a tener efecto en el contenedor.
 span
a
img
em
strong
i
small

 display: inline-block: es igual que inline solo que en 
 este caso si van a taner efecto las propiedades ancho y alto

display: block: ocupa todo el ancho del contenedor, este si inicia
una nueva linea: div
h1
p
li
section



----------------------------------------------------------------------

margin: 10px  10px  10px 10px;
/* arriba, derecha, abajo, izquiera */

si solo ponemos 2 valores estos van a ser: el primero los de arriba y abajo el segundo
a los lados 
margin: 10px  10px ;

con  margin: auto; puedo centrar horizontalmente siempre y cuando tenga un width definido
ademas debe ser un elemento bloque como por ejemplo div


cuando se usa el padding este incrememta el tamaño del elemento, para evitar que esto pase
puedo usar la propiedad  box-sizing: border-box; para que el elemento mantenga sus dimensiones 
originales

border: 1px solid red;
tamaño tipo color

  border-radius: 15px 4px 30px 10px;
  arriba izq, arriba derecha, abajo derecha, abajo izq


   box-shadow: 10 ;
desplazamiento horizontal, desplazamiento vertical , difuminar la sombra, esparcir la sombra, color
si uso numeros positivoe en el desplazamiento la sombra se va a mover hacia abajo y a ña derecha
pero si uso numero negativos se va a desplazar hacia arriba y a la izquierda




-----------------------------------------------------------------------------------------
Textos

text-align: center;
me ayuda a centrar los textos

si tengo una imagen dentro de un contenedor padre puedo centrarla 
con text-align: center; ya que esta se puede tratar com un texto 

cuando uso el valor inherit (ojo valor No propiedad) estoy indicando que quiero que
herede el valor de la misma propiedad que tiene el elemento padre


 letter-spacing: 20px;
 espacio entre letras
 puedo usar numeros negativos

 word-spacing: 10px;
 espacio entre cada palabra
  puedo usar numeros negativos

   text-shadow: desplazamiento en x, desp en y, blur, color ;
   sombra a los textos


 text-transform: uppercase ;
 transforma todo el texto, en este caso todo a mayusculas

 line-height: 30px;
 altura de cada lina de texto, esto nos sirve para separar 
 el espaciado entre lineas en un parrafo

  text-decoration: underline;
  esta propuedad esa dividida en 3 partes 
   text-decoration: linea, estilo y color ;
   y se puede manipular de la siguiente forma:

    text-decoration-line: line-through overline underline;
    posicion de la linea, sobre el texto, arriba o abajo del texto

    text-decoration-style: wavy; o dashed o  dotted 
    con olas, con rayas o puntos

  text-decoration-color: crimson;
  color de la lineas



---------------------------------------------------------------------------------

Tamaños

REM
toma como base el tamaño del navegador, que para la mayoria es 16px
el tamaño base de los textos en los navegadores es generalmente  
16px, en este caso 1rem equivale a 16px


podemos cambiar el tamaño base de la letra agregando la propiedad 
font-sizea nuestro html de la siguiente forma 
html{
    font-size: 32px
}
ya para este caso 1rem equivale a 32px

EM
toma como base el tamaño de fuente del elemento padre


para cambiar el tipo de letra usamos google fonts
importamos el tipo de furnte y lo agregamos al archivo .css
@import url("https://fonts.googleapis.com/css2?family=Nunito:wght@400;500&family=Open+Sans:wght@300&family=Poppins:wght@300;700&family=Raleway:ital,wght@0,100;0,400;0,500;1,300;1,400;1,500&display=swap");
luego dentro de la etiqueda html o body agregamos la fuente
body {

  font-family: "Raleway", sans-serif;
}


Para poder usar height con porcentajes nesecito que el elemento padre tenga un tamaño definido y no en porcentajes
tambien.


viewport width: vw
viewport height: vh 

ambas medidas van adel 1 al 100 y son relativas por que dependen del tamaño del viewport y el viewport es el total 
de lo que puedo ver en pantalla 

--------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
background


background-image: url(/img/tecnologia.jpg)
 me permite poner una imagen de fondo 

  background-image: url(/img/tecnologia.jpg), url(/img/sun.png);
  cuando quiero agregar mas de una imagen al contenedor los separo 
  con una ','

  si una imagen es muy pequeña se va a repetir muchas veces en el contenedor 
  pero si queremos que solo este una vez usamos la propiedad  background-repeat
  que por defecto su valor es repeat, para que no se repitan ponemos:
  background-repeat: no-repeat;

ahora si solo quiero que se repitan en el eje X y no en el Y usamos el valor
background-repeat: repeat-x;

ahora si solo quiero que se repitan en el eje Y y no en el X usamos el valor
background-repeat: repeat-y;

  background-position: posicion x, posicion en y ;
  se le pueden dar valores en px % rem em
  tambien recibe unas palabras reservadas para determinar la posicion,
  estas palabras son: top, bottom ,left, right y center

  tambien puedo mezclar las medidas, por ejemplo si lo uso de esta forma 
   background-position: top 20px right 10px;
   esto quiere decir que desde la parte alta del contenedor le va a agregar
   20px y desde la parte derecha le va a agregar 10px


background-size: ancho y alto ;
tamaño del fondo

  background-size: contain;
  contain escala la imagen al mayor tamaño posible sin recortar y sin estirar
  la imagen

 background-size: cover;
 esta si va a ocupar el 100% del contenedor pero si es necesario va a recortar 
 la imagen 

  background-attachment: ;
  sirve para modificar que tan fijo es el posicionamineto de las imagenes
  ej: si uso 
    background-attachment: fixed ;
    la images va a tomer el 100% del tamaño del NAVEGADOR pero solo se 
    va a mostrar la porcion que ocupa el contenedor

    si el tamaño de la pantalla se vuelve mas alto como para hacer scroll
    veremos un efecto parallax 


Gradientes
background-image: linear-gradient(crimson, orange);
este es el degradado desde el color crimson a orange
por defecto la direccion es de arriba hacia abajo 

background-image: linear-gradient(direccion, color stop, color stop ...);
este es el orden de valores del linear gradient

background-image: linear-gradient(to top, crimson, orange);
esto pone el crimson abajo y orange arriba
tambien puede ser to left, to right, to top, to bottom
de igual manera puedo mezclarlos de la siguiente forma
 background-image: linear-gradient(to top left, crimson, orange);
 y asi sale un gradiente en diagonal

 de igual forma puedo usar angulos para determinar una direccion del gradiente
   background-image: linear-gradient(63deg, crimson, orange);

los stop determinan el porcentaje en donde parara la transicion ej:
  background-image: linear-gradient(crimson 5%, orange 80%);


  background-image: linear-gradient(
      rgba(220, 20, 60, 0.445),
      rgba(255, 166, 0, 0.473)
    ),
    url(/img/tecnologia2.jpg);

    una imagen con un fondo delante en degradado

-------------------------------------------------------------
Listas e imagenes
 

 Las listas tienen un padding por defecto (donde aparecen los puntos
 o los numeros de las listas) siqueremos quitar este padding lo 
 hacemos de la siguiente forma:
 ul,
ol {
  padding: 0;
}


list-style: tipo, imagen, posicion de la lista;
esta propiedad se puede usar en el elemtno li o directamente 
en el elemento ul u ol

list-style: disc;
list-style aplicaco a ul por defecto tiene el valor disc,
que hace alucion a los discos o puntos que llevan  a lado izquierdo

list-style: decimal;
va a aparecer ordenada por numeros

list-style: square;
con cuadrados

list-style: upper-roman;
numeros romanos

list-style: none;
sin nada

 list-style-image: url(/img/icono.png);
 usar una imagen como indcador (viñeta) de orden (en lugar de numeros o los puntos ) 

list-style-position: outside;
posicion de las viñetas de orden, por defecto es outside

 list-style-position: inside;
 poner las viñetas dentro del contenido

resolucion de una imagen:
a veces vamos a querer que una imagen este fija en un ancho 
y un alto, como en una galeria.
para esto podemos usar la propiedad object-fit
al igual que el backgroun podemos usar contain, fill, cover, none
es recomendado tanto para background como para object-fit usar cover
ya que este recorta la imagen pero no pierde resolucion

---------------------------------------------------------------------------
pseudoclases

Sirven como  filtro a los selectores
o tambien se pueden ver como selectores de un estado en especifico de un elemento
ej; click mouseover etc etc

estas solo funciona con el elemeno <a></a>
:link: para los elementos que NO han sido visitados 
:visited: para los elementos que ya han sido visitados

:hover: se activa cuando pasamos el mouse sobre un elemento
:active: se activa cuando damos click sobre un elemeno, solo va a estar activa cuando
tengamos presionado el click del mouse
:target se puede apuntar a otro elmento

:focus: seleccion aun elemento cunado un usuario esta activo en elemento
ej: un input

un elementos como h1...h6 o labels  se puende volver editables si se agrega
la propiedad contenteditable

:checked: selecciona al elemento que previamente haya sido seleccionado,
solo funciona con inputs de tipo radio o checkbox

:focus-within: selecciona un elemento que contenga un elemento hijo en estado focus

:root: da estilo al elemento raiz de la pagina, en la mayoria de lso casos es 
la etiqueta html

:not:es un filtro, sirve como una negacion

:only-of-type: seleccion a los elementos que son unicos dentro de su 
contenedor padre

.box:first-of-type:selecciona el primer elemento de su tipo

.box:nth-of-type(2): selecciona el elemento de su mismo tipo que este en
la posicion que especifique, en este caso la segunda

.box:nth-of-type(odd): selecciona los elementos impares
.box:nth-of-type(even): selecciona los elementos pares

.box:nth-of-type(n) los selecciona a todos 

.box:nth-last-of-type(): hace los mismo que el anterior solo que inicia desde
abajo hacia arriba

.box:only-child: selecciona a los elementos que sean hijos unicos no importa el tipo, o sea que no tienen
elementos hermanos

tambien podemos encontra el only-child de la siguente forma, .container :only-child 
recordemos que cuando se pone un espacio antes de una pseudoclase es como si tuviera un *
.container *:only-child 

.container :first-child: selecciona el primer hijo de un contenedor (esta pseudoclase es un condicional),
aqui podemosser aun mas especifico cuando queremos crear condiciones del primer hijo, por ejemplo, 
si quiero crear el condicional para que se aplique si el primer elemeno hijo
es un parrafo  lo puedo hacer de la siguiente forma: p:first-child,
aqui se aplica mi css siempre y cuando el PRIMER elemento hijo del contenedor sea un 
parrafo.

.box:last-child: funciona igual que first-child, solo que este selecciona el ULTIMO 
elemento hijo que cumpla con la condicion

div:nth-child(4): selecciona el 4to elemento si este es un div y le aplica el css

.container :nth-last-child(1): funciona igual que first-child, solo que empezando
de abajo hacia arriba, en este caso aplica el css al primer elemento de abajo hacia 
arriba

::selection: permite modificar la manera como se seleccionan los elementos 
en una pagina

::first-line: permite modificar la primer linea de un texto
p::first-line {
  color: blue;
}

::first-letter: permite modificar la primera letra de un parrafo

::placeholder: me permite modificar el placeholder de un input


::before y ::after permiten cear elementos sin estar en el HTML


------------------------------------------------------------------------------
pseudoelementos
Permiten añadir estilos a una parte concreta del documento o de los elementos

por ejemplo la primer parte de un parrafo

a diferencia de las pseudoclases los pseudoelementos se definen con 4 puntos ::

.card__text::before{
  content: url(): para agregar una imagen
}
.card__text::before {
  content: "Hola texto";
}

.card__text::after {
  content: "al final del texto ";
}


---------------------------------------------------------------------------
posiciones
por defecto todos los elementos del html vienen con 
position:static esto no permite desplazar el elemento
quiere decir que siguen el flujo de siempre, de arriba hacia abajo
y de izquierda a derecha

relative: cuando uso relative puedo acceder a 4 nuevas propiedades que son:
top, left, right, bottom
y se llama relative porque se mueve deacuerdo a su posicion relativa, la original 

.relative {
  background: crimson;
  position: relative;
  /* top: 20px;
  left: 200px;
  right: 0;
  bottom: 0; */
}

Absolute: se posiciona de acuerdo a su elemento padre, OJO, position static no cuenta 
como posicionamiento, su elemento padre debe ser relative, en caso de no tener un elemento padre,
se posicionara de acuerdo al body del navegador tambien puedo usar top, left, right, bottom


la propiedad z-index solo funciona con elementos posicionados como relative fixed o absolute, no funciona
con static

fixed: al igual que absolute pierde su espacio en el flujo, se posiciona con base solo al navegador, no se posiciona 
con respecto a un componente padre como el absolute. 
------------------------------------------------------------------------
Variables o Custom properties

:root {
  --color-primario: rgb(223, 11, 11);
  --color1: darkCyan;
}

se llaman usando la funcion var()
  color: var(--color-primario);

 Fallback es un valor por defecto en caso de 
no encontrar la varaible que estamos llamando 
color: var(--color12, rgb(0, 207, 138));

------------------------------------------------------------------------
Media Queries

Cada dispositivo tiene un viewport diferente.
viewport: area visible del navegador

Imagnes: usar un  max-width: 100% en todas la imagenes y la etiqueta picture


definir media Queries
@media "tipo de media" and (expresion)
"tipo de media": si es una pantalla o mandamos a imprimir una pagina a una impresora
la expresion define cuando es que se debe ejecutar la media querie


Puedo utilizar mas de una condicion para las mediaqueries tambien compuertas logicas
en este caso and
@media screen and (orientation: portrait) and (max-width: 600px) {
  .title {
    text-align: right;
  }
}

Tambien puedo utilizar or, el or se puede usar por medio de una ","

-------------------------------------------------------------
metodologia BEM (Block Elelemt Modifier)


Bloque: entida o elemento independinte, form footer, contenedor un menu etc
ej: 
    <form class="form">
    </form>

Element: elementos dentro de un bloque
ej: 
    <form class="form">
<input type="text" class="form__input">
<input type="text" class="form__input">
    </form>

Modificador: representa una alteraciona un bloque o un elemento.
ej, todos los enlaces tendran un color negro, excepto 1, en este caso 
a ese unico enlace le agregamos un modificador
ej:
    <nav class="navbar">
      <a href="#" class="navbar__item navbar__item--red">Inicio</a>
      <a href="#" class="navbar__item">Acerca de</a>
      <a href="#" class="navbar__item"> </a>
    </nav>

 --------------------------------------------------------------------
 flexbox   
 comportamiento por defecto es: 
   align-items: stretch;
   flex-direction:row;
   flex-wrap: nowrap
   justify-content: flex-start:

   display: inline-flex: permite que el contenedor sea un elemento
   en linea

flex-direction: row;
flex-wrap: wrap;

atajo para flex-direction y flex-wrap:
flex-flow: direction wrap;
flex-flow: row wrap;

alineamiento:
justify-content: center: alineamiento en el eje PRINCIPAL
para que se pueda alinear se debe tener espacio sobrante o disponible 
dentro del contenedor

 align-items: center: alineamiento en el eje SECUNDARIO
para que se pueda alinear se debe tener espacio sobrante o disponible 
dentro del contenedor por defecto stretch

align-content: center: esta propiedad sirve para alinear al eje
SECUNDARIO, siempre y cuando se desborden los elementos en el 
eje principal, es decir cuando hay mas de 1 fila o columna, o sea, 
si funciona el wrap


flex-grow:es el factor de crecimiento, determina cuanto crece 
un elemento con respecto a otros, distribuye el espacio sobrante
entre los flex-items

ej: si todos los flex items tiene un flex-grow de 1 entonces 
se distribuye el espacio equitativamente, con esto ya no puedo 
usa justify-content, ya que no habria espacio disponible

si solo aplico flex-grow:1 a 1 item del contenedor, este 
item tomara el espacio sobrante 

Ahora, si tengo 3 items con un flex-grow:1 y un cuarto item con un  
flex-grow: 3 (en el ejemplo tengo 4 items) el grow se calcularia 
con 6 items, o sea 3+3, por ende el espacio sobrante se divide
entre 6, pero como existe un item con un flex-grow:3 a ese item
se le aplica (espacio_sobrante/6) * 3

flex-grow flex-shrink y flex-basis solo funcionan en el 
eje principal



flex-shrink:determina que tanto se encoje un elemento con 
respecto a otro, esto pasa cuando se distribuye el espacio 
FALTANTE, es decir, si falta espacio los item se encojeran
para no desbordar el contenedor, por defecto flex-shrink:1.
flex-shrink no acepta negativos, el minimo el 0

funciona igual que flex-grow cuando doy un valor mayor a 1 solo
que disminuyendo el tamaño

flex-basis: tamaño inicial del elemento antes de que sufra algun
cambio de distribucion ya sea grow o shrink
el valor por defecto es auto
flex-basis predomina por encima a width o height

shorthand para grow shrink y basis
flex: grow shrink basis

align-self: center ; hace lo mismo que align items solo que este aplica
solo para un elemento en particular, solo aplica para el eje secundario

-------------------------------------------------------------------------------------------------
gradient

grid track: espacio entre 2 grid lines adyasentes tambien se les conoce com ofilas y columnas

grid area:  es el espacio entre 4 grid lines, solo puede tener forma de un cuadrado o un rectangulo 

El flujo de grid por defecto es el filas (column), vertical contrario
a flexbox que es el columnas (row)
 
 tambien por defecto tiene un align-items:stretch, esto hace
 que los items ocupen el 100% del contenedor, a menos que 
 se le de un alto fijo a los items

grid-template-columns: define las columnas en el grid, se puede utilizar 
cualquier unidad de medida

puedo crear la cantidad de columnas que quiera con grid-template-column

grid-template-columns: 10% 10% 10% 10% 10% si quisiera crea 5 o mas columnas
esta seria la forma de hacerlo, pero es muy tedioso estar definiendo 
una por una, para hacerlo mas rapido podemos usar repeat(cantidad, unidad de medida)

ej: grid-template-columns:repeat(5, 10%)

con repeat tambien puedo crear patrones, por ejemplo:
grid-template-columns:repeat(3, 10px 50px) esto va a crear 3 columnas de
10px y 50px, pero las va a intercalar, promero una de 10 y la siguiente de 
50 y asi sucesivamente

al igual que en flexbox tambien podemos hacer los grid-items flexxibles
y para eso grid utiliza una unidad de medida llamada fr o fraccion
Lo que hace esta unidad de medida es dividir el espacio dsiponible en fracciones

grid-template-columns: 1fr 1fr 1fr: esto lo que hace es crear 3 columnas 
del mismo tamaño, divide el ancho de la pantalla en 3 fracciones iguales

  grid-template-columns: 3fr 1fr 1fr: de igua forma, tambien puedo crear
  2 o mas fr, esta linea divide la pantalla en 5 fracciones, pero a la 
  primer columna le va a dar el tamaño de 3


  tambien puedo usar la unidad de medida auto, si al menos 1 de las columas
  tiene como unidad de medida fr la columna auto va a tener el ancho de
  su contenido, pero si las demas columnas tienen otra unidad mas fija
  (px cm etc) la la unidad auto va ocupar el espacio disponible

  grid-template-columns: 1fr 1fr auto;

filas grid-row:
para crea filas utilizo grid-template-row, esta por defecto tiene el valor 
auto

--------------------------------

propiedades de los grid items:
posicionamiento


grid-column-start: linea de columna donde empieza, a travez de especificar
la linea de columna donde yo quiera que empiece el elemento 
grid-row-end:linea de columna donde termina

atajo para grid-colum-start y grid-colum-end,
grid-column: linea inicio / linea final;

funciona igual para grid row


el valor span me sirve para determinar cuantas columnas quiero usar o
avanzar

grid-column: span 2: la celda ahora ocupa 2 columnas
grid-row: span 3: la celda ahora ocupa 3 filas

valores negativos: como vemos en las lineas que dibuja el navegador al final
del contenedor existen -1 para filas y columnas, estos valores tambien 
me ayudan a determinar la pocision de una celda, por ejemplo 
grid-row: 1 / -2;

grid-area: es un atajo para grid-column y grid-row
grid-area: line inicial fila / linea inicial columna / linea final fila /
liena final columna

  row-gap: 20px; espaciado entre filas
  column-gap: 20px; espaciado entre columnas

  gap: es un atajo para para row gap y y column gap
  gap: espaciado entre filas espaciado entre columnas 
  gap: 10px se aplica para filas y columnas


  grid-column-gap grid-row-gap y grid-gap ya son propiedades obsoletas
  ya no debo utilizarlas


  el flujo por defecto de grid es en filas al igual que en flexbox
  pero puedo cambiar el flujo con la propiedad  grid-auto-flow: column o row ;

  cuando definimos el flujo de grid ya sea row o column se crean filas o 
  columnas implicitas( se crean por defecto cuando no caben en el 
  contenedor) pero se crean con un tamanño menor al del resto de 
  los items, pero con las propiedades   grid-auto-columns: 100px;
  o grid-auto-rows: 100px; podemos  darle un tamaño a esas filas
  o columnas implicitas
  ej:

grid-auto-columns: 100px;
grid-auto-rows: 100px;

puedo crear un patron con los tamaños de las columnas o filas implicitas
de la siguiente manera:

grid-auto-columns: 20px 50px;
grid-auto-rows: 20px 50px;

esto le dara a la primer fila/columna un tamaño de 20px y a la
segunda un tamaño de 50px y asi sucesivamente

En ocaciones al momento de crear nuestra grid podemos tener espacios 
en blanco, estos espacioj se pueden "llenar" o mejor grid los
organiza de le la mejor forma usaando el valor dense de la propiedad
grid-auto-flow: dense;

este lo organiza por filas por defecto, pero si queremos que lo 
organice por columnas usamos 
grid-auto-flow: column dense;

-------------------------------------------------
grid areas
grid-template-areas: ""; representa algo como una plantilla
cada par de comillas representa una fila y dentro de las
comillas van nombres, estos nombres van a definir columnas 
(yo se, suena raro pero asi es)

grid-template-areas:
    "c1 c1 c2 c3"
    "c1 c1 c5 c6";


  grid-template-areas:
    "header header header main main"
    "header header header main main"
    "header header header main main";

  si no quiero asignar una columna (dejarla vacia)
  solo debo asignar un . 

  grid-template-areas:
    "header header header main main"
    "header header header main main"
    "header header header . .";


    ahora como voy a posicionar los elementos en 
    las areas? usando la propiedad grid-area

    esta propiedad se le asigna a los elementos de la siguente forma:


    .header {
  background: crimson;
  grid-area: header;
}

.main {
  background: seagreen;
  grid-area: main;
}

.sidebar {
  background: slateblue;
  grid-area: sidebar;
}

.footer {
  background: skyblue;
  grid-area: footer;
}

--------------------------------------------------
css grid avanzado

podemos dar nombre a las lineas del grid usando []
ojo, el nombre lo debemos definir antes del valor de la 
columna. ej:  grid-template-columns: [linea-inicial]1fr [linea-medio]1fr [linea-final];
.grid {
  width: 90%;
  max-width: 600px;
  height: 600px;
  margin: 30px auto;
  outline: 3px solid #000;
  display: grid;
  grid-template-columns: [linea-inicial]1fr [linea-medio]1fr [linea-final];
}

las lineas tambien pueden tener mas de 1 nombre
 grid-template-columns: [linea-inicial]1fr [linea-medio linea-inicial2]1fr [linea-final];

 valores dinamicos para las celdas:
min-content: crea una celda con el minimo de valor posible, crece deacuerdo a 
su contenido
max-content: crea una celda con el maximo de valor posible

  grid-template-columns: min-content max-content;
  grid-template-rows: min-content max-content;

fit-content(): nos ayuda a definir un tamaño MAXIMO para una fila
o una columna ej:
  grid-template-columns: fit-content(200px);

  minmax(): define el valor minimo o maximo de una columna o fila

minmax(valor minimo, valor maximo)

grid-te mplate-columns: minmax(200px, 400px) minmax(20px, 200px);

auto-fill: se usa junto con repeat, crea tantos tracks (colunas o filas)
como sea posible. ej
grid-template-columns: repeat(auto-fill, 20%);

 puedo utilizar minmax() dentro del repeat
 grid-template-columns: repeat(auto-fill, minmax(110px, 20%));

-----------------------------------------------
alienacion grid

 justify-items: se alienean los elementos en filas, su valor por defecto es 
 stretch

 align-items: alinearlos en columnas (verticalmente)

 place-items: es el atajo para justify-items y align-items
 place-items: align-items justify-items
place-items: center start;
si solo uso un valor este valor aplicara para las 2 propiedades


si el tamaño de la grid es pequeño y existe espacio horizontalmente puedo 
alinear toda la grid con respecto de un contenedor usando justify-content
y align-content

justify-content:alinear horizontalmente. center | start| end | space-around...
 align-content: alinear verticalmente  center | start| end | space-around...

place-content: atajo para justify-content y align-content

place-content:align-content justify-content
  
grid: es un atajo para grid-template-columns y grid-template-rows
grid: rows/columns
grid: 1fr 1fr / repeat(3, 1fr);

order: esta propiedad se declara en los GRID ITEMS, por defecto el valor de
order es 0 entre mas grande sea en valor se pondra al final 
order: 3;

podemos alinear vertical y horizontalmente un solo item de un grid usando 
align-self y justify-self
  align-self: center;
  justify-self: end;
 justify-self: stretch;
 place-self: align justify: atajo para align-self y justify-self 
recuerda que estos solo se aplican a los ITEMS no al grid completo